# AllPlayers Service Webhooks
The AllPlayers Service Webhooks act as a proxy between the defined [AllPlayers API](http://develop.allplayers.com/) and a pre-existing third party API.

## How the services work
1. A Service Webhook job is submitted, when a [Webhook](http://develop.allplayers.com/webhooks.html) is triggered on the [AllPlayers website](https://www.allplayers.com/).
2. If the group has Webhooks enabled, the job makes a request to the specified url with the corresponding [hooks data](#).
3. Your external app does something with that data (sync users and groups, send emails, etc).

## Steps to contributing
AllPlayers will accept service hooks for production web applications. We would like the contributions to look like our template below. To provide quality service and support to our users, we would additionally ask that all contributions include:
   - Documentation about what the hook does.
   - Tested code, phpunit tests if possible.
   - A URL to a logo for the service

1. Fork the project
2. Create a new file in `lib/AllPlayers/Webhooks/` called `YourService.php`, using the template given below.
3. Send a pull request form your fork to [allplayers/service-webhooks](https://github.com/AllPlayers/service-webhooks)
4. Once accepted, we'll add any necessary data fields to the AllPlayers front-end so people can start using your application.

```php
/**
 * @file MyService.php
 *
 * Every file must have a code block explaining what the file does.
 */

namespace AllPlayers\Webhooks;

/**
 * Every class must have a code block detailing what the class does.
 */
class MyService extends Webhook
{
    /**
     * Every property must have a codeblock detailing the reason for it.
     */ 
 
    /**
     * The url to send the Webhook data.
     */
    public $domain = 'http://your-service-domain.com';

    /**
     * The url of the logo (Optional but desired for optimal user experience).
     */
    public $service_logo = 'http://your-service-domain.com/logo.png';
	
    /**
     * The method used for Client authentication.
     *
     * Options:
     *   'no_authentication'
     *   'basic_auth'
     *   'oauth'
     * Default:
     *   'no_authentication'
     *
     * If using 'basic_auth', the $subscriber must contain: user and pass.
     * If using 'oauth', the $subscriber must contain: consumer_key, consumer_secret,
     * token, and secret.
     */
    public $authentication = 'no_authentication';
	
    /**
     * The method of data transmission.
     *
     * Options:
     *   'form-urlencoded'
     *   'json'
     * Default:
     *   'json'
     *
     * @var string
     */
    public $method = 'json';

    /**
     * Determines if the webhook will return data that requires processing.
     *
     * Options:
     *   true
     *   false
     * Default:
     *   false
     *
     * @var boolean
     */
    public $processing = false;
	
    /**
     * Configure the authentication credentials, and other Webhook specifics here.
     */
    public function __construct(array $subscriber = array(), array $data = array(),
        array $preprocess = array())
    {
        parent::__construct($subscriber, $data, $preprocess);
        $this->process();
    }
	
    /**
     * Process the webhook data and set the domain to the appropriate URL.
     * (This is required, all webhook processing should be completed here)
     */
    public function process()
    {
        // do webhook processing here, such as, changing the URL and data being sent.
    }

    /**
     * Process the webhook data returned from sending the webhook; The value
     * returned is used to map a AllPlayers internal resource to a partners
     * resource.
     * 
     * @param array $data
     *   Response from the webhook being processed/called.
     * 
     * @return
     *   The partner resource to be correlated with the AllPlayers resource.
     */
    public function processResponse($data)
    {
        /**
         * This function is only required for webhooks with: $processing = true;
         */
            
        $response = "";

        // set response based on $data manipulation here

        return $response;
    }
}
```

*Tests are required for all patches*

This webhook implementation is modeled after the [GitHub Webhooks API](http://developer.github.com/webhooks/). A huge thanks goes out to the GitHub developers and to future AllPlayers developers that work on additions to our services.
