# AllPlayers Service Webhooks
The AllPlayers Service Webhooks act as a proxy between the defined [AllPlayers API](http://develop.allplayers.com/) and a pre-existing third party API.

## How the services work
1. A Service Webhook job is submitted, when a [Webhook](http://develop.allplayers.com/webhooks.html) is triggered on the [AllPlayers website](https://www.allplayers.com/).
2. If the group has Webhooks enabled, the job makes a request to the specified url with the corresponding [hooks data](#).
3. Your external app does something with that data (sync users and groups, send emails, etc).

## Steps to contributing
AllPlayers will accept service hooks for production web applications. We would like the contributions to look like our template below. To provide quality service and support to our users, we would additionally ask that all contributions include:
   - Documentation about what the hook does.
   - Tested code, phpunit tests if possible.
   - A URL to a logo for the service

1. Fork the project
2. Create a new file in `lib/AllPlayers/Webhooks/` called `YourService.php`, using the template given below.
3. Send a pull request from your fork to [allplayers/service-webhooks](https://github.com/AllPlayers/service-webhooks)
4. Once accepted, we'll add any necessary data fields to the AllPlayers front-end so people can start using your application.

```php
/**
 * @file YourService.php
 *
 * Every file must have a code block explaining what the file does.
 */

namespace AllPlayers\Webhooks;

/**
 * Every class must have a code block detailing what the class does.
 */
class MyService extends Webhook
{
    /**
     * Every property must have a codeblock detailing the reason for it.
     */ 

    /**
     * The URL to post the webhook.
     *
     * @var string
     */
    protected $domain = 'http://your-service-domain.com';

    /**
     * The URL of the logo (Optional but desired for optimal user experience).
     *
     * @var string
     */
    protected $service_logo = 'http://your-service-domain.com/logo.png';

    /**
     * The method used for Client authentication.
     *
     * @see AUTHENTICATION_NONE
     * @see AUTHENTICATION_BASIC
     * @see AUTHENTICATION_OAUTH
     *
     * @var integer
     */
    protected $authentication = self::AUTHENTICATION_BASIC;

    /**
     * The method of data transmission.
     *
     * This establishes the method of transmission between the AllPlayers
     * webhook and the third-party webhook.
     *
     * @see TRANSMISSION_URLENCODED
     * @see TRANSMISSION_JSON
     *
     * @var string
     */
    protected $method = self::TRANSMISSION_URLENCODED;
	
    /**
     * Configure the authentication credentials, and other Webhook specifics here.
     */
    public function __construct(array $subscriber = array(), array $data = array(), array $preprocess = array())
    {
        parent::__construct($subscriber, $data, $preprocess);
        $this->process();
    }
	
    /**
     * Process the webhook data and set the domain to the appropriate URL
     */
    protected function process()
    {
        // do webhook processing here, such as, changing the URL and data being sent.
        parent::post();
    }
}
```

### Additional Processing
Any webhook that requires processing of an API response, may implement the interface: ProcessInterface.php

```php
class MyService extends Webhook implements ProcessInterface
{
    ...
}
```

By implementing the ProcessInterface, you must also include its function inside your custom webhook:

```php
    /**
     * Process the webhook data returned from sending the webhook.
     *
     * This function should relate a piece of AllPlayers data to a piece of
     * third-party data; This information relationship will be made via the
     * AllPlayers Public PHP API.
     *
     * @param \Guzzle\Http\Message\Response $response
     *   Response from the webhook being processed/called.
     */
    public function processResponse(Response $response)
    {
        // Do some action because some response was returned
    }
```

*Tests are required for all patches*

This webhook implementation is modeled after the [GitHub Webhooks API](http://developer.github.com/webhooks/). A huge thanks goes out to the GitHub developers and to future AllPlayers developers that work on additions to our services.
